/********************************************************************************
*											                                    *
*   L_3. 																		*
*	Данная задача предполагает получение таблицы данных:						*
*	x     S(x)   Y(x)   |Y(x)-S(x)| ,    										*
*	где значение аргумента x изменяется от a до b с шаго						*
*	Для каждого x найти значения функции Y(x), суммы S(x						*
*	Результаты расчетов  вывести в виде таблицы. 								*
*	Значения a, b, h и n вводятся с клавиатуры. 								*
*	Так как значение S(x) является рядом разложения функ						*
*	то значения S и Y для текущего аргумента x должны со						*
*	в целой части (в двух-четырех позициях после десятич						*
*	Работу программы проверить для a=0,1; b=1,0; h=0,1;							*
*	n выбрать самостоятельно.													*
*	Вариант 6.																	*
*   S(x)=∑(k=0)^n (2k+1)/k!⋅x^2k, Y(x)=(1+2x^2)e^(x^2 ).						*
*																				*
********************************************************************************/
#include <locale>

int main() {
	setlocale(LC_CTYPE, "Russian");
	int k, n, factorial, count;
	double a, b, h, x;
	double S, Y;

	printf_s("Введите x (начальное значение): ");
	scanf_s("%lf", &a);
	printf_s("Введите x (конечное значение): ");
	scanf_s("%lf", &b);
	printf_s("Введите шаг инкремента: ");
	scanf_s("%lf", &h);
	printf_s("Введите конечное значение k: ");
	scanf_s("%i", &n);

	n = 8;
	a = 0.1;
	b = 1.0;
	h = 0.1;

	printf("\n  |   x   |    S(x)    |    Y(x)    | |Y(x) - S(x)| |\n");
	printf("  ---------------------------------------------------\n");

	for (x = a; x <= b; x += h) {
		S = 0.;
		for (k = 0; k <= n; k++) {
			factorial = 1;
			for (count = 2; count <= k; count++) {
				factorial *= count;
			}
			S += (((2 * k + 1) / (float)factorial)) * pow(x, 2 * k);
		}

		Y = (1 + 2 * (x * x)) * exp(x * x);
		printf("  |  %.1f  |   %.4f   |   %.4f   |     %.3f     |\n", x, S, Y, fabs(Y - S));
	}

	printf("  ---------------------------------------------------\n\n");

	return 0;
}